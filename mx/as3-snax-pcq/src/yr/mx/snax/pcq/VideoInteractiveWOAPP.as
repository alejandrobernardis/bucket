/**# Copyright (c) 2012 Young and Rubicam Digital Mexico.# Licensed under the Apache License, Version 2.0 (the "License")## Author: Alejandro M. Bernardis# Email: alejandro.bernardis at gmail.com# Created: Feb 18, 2012 15:51:18 AM**/package yr.mx.snax.pcq {	import kc.utils.PurgerUtil;	import kc.api.flash.IMovieClip;	import kc.logging.SimpleLog;	import kc.utils.ClassUtil;	import com.adobe.serialization.json.JSON;	import com.google.analytics.AnalyticsTracker;	import com.google.analytics.GATracker;	import com.google.analytics.core.TrackerMode;	import flash.display.Loader;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.events.SecurityErrorEvent;	import flash.geom.Rectangle;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.system.ApplicationDomain;	import flash.system.LoaderContext;	import flash.system.Security;	public class VideoInteractiveWOAPP extends MovieClip implements IMovieClip {				private const JSON_PATH:String = "./common/data/database.json";				private var urlLoader:URLLoader;		private var player:Object;		private var loader:Loader = new Loader();		private var starDrag:Boolean = false;		private var starDragVolume:Boolean = false;		private var currentIdVideo:String = "";		private var currentSegIni:Number = 0;		private var currentSegFin:Number = 0;		private var _json_data:Object;		private var _current_data:Object;		private var _status_view:Boolean;		private var showArrows:Boolean = false;		private var ArrowsType:Number = 0;		private var _countArrows:Number = 0;				protected var _context:LoaderContext;				public var containerButtons:MovieClip;		public var mc_Controller:MovieClip;		public var miMask:MovieClip;		public var mc_arrow:MovieClip;		public var mc_arrowB:MovieClip;				/** GA- **/				private const GA_ID:String = "UA-29364035-2";		private var _tracker_list:Array;		public var tracker:AnalyticsTracker;						/** -GA **/						public function VideoInteractiveWOAPP() {			super();			if ( !stage ) {				addEventListener(Event.ADDED_TO_STAGE, $config);			} else {				$config();			}		}				public function get context():LoaderContext {			return _context;		}				public function get flash_vars():Object {			if( ! this ) 				return null;			if( ! this.stage.loaderInfo.parameters )				return new Object();			return this.stage.loaderInfo.parameters;		}				protected function $config(e:Event = null):void {			Security.allowDomain("*");			Security.allowDomain("www.youtube.com");			Security.allowDomain("*.youtube.com");						_context = new LoaderContext(				true, 				ApplicationDomain.currentDomain			);						/** GA- **/						GATracker.autobuild = false;            tracker = new GATracker(this, GA_ID);			tracker.mode = TrackerMode.AS3;            tracker.config.sessionTimeout = 60;            tracker.config.conversionTimeout = 180;			GATracker(tracker).build();			_tracker_list = new Array();						/** -GA **/						containerButtons = new MovieClip();			mc_Controller = ClassUtil.getClassInstance("mcController", _context.applicationDomain);			miMask = ClassUtil.getClassInstance("mask_mc", _context.applicationDomain);			mc_arrow = ClassUtil.getClassInstance("arrow_mc", _context.applicationDomain);			mc_arrowB = ClassUtil.getClassInstance("arrow_mc", _context.applicationDomain);			urlLoader = new URLLoader();			urlLoader.load(new URLRequest(flash_vars.json_path || JSON_PATH));			urlLoader.addEventListener(Event.COMPLETE, dataLayerLoaded);			urlLoader.addEventListener(IOErrorEvent.IO_ERROR, dataLayerError);			urlLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, dataLayerError);			if (e) removeEventListener(Event.ADDED_TO_STAGE, $config);		}				private function dataLayerLoaded(e:Event):void {			tracker.trackEvent("snax-secuencias", "load", "data");			_json_data = JSON.decode(e.target.data);			_current_data = _json_data.E;			creaPlayer();			dataLayerClear(e);		}		private function dataLayerError(e:Event):void {			SimpleLog.print(e);			dataLayerClear(e);		}		private function dataLayerClear(e:Event):void {			var t:* = e.target;			t.removeEventListener(Event.COMPLETE, dataLayerLoaded);			t.removeEventListener(IOErrorEvent.IO_ERROR, dataLayerError);			t.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, dataLayerError);			t = null;		}		private function listenersController():void {			if(!mc_Controller.btn_play.hasEventListener(MouseEvent.CLICK)){				mc_Controller.btn_play.addEventListener(MouseEvent.CLICK, ControllerClick);				mc_Controller.btn_pause.addEventListener(MouseEvent.CLICK, ControllerClick);				mc_Controller.main_btn_play.addEventListener(MouseEvent.CLICK, ControllerClick);				mc_Controller.btn_mute.addEventListener(MouseEvent.CLICK, ControllerClick);				mc_Controller.btn_volumen.addEventListener(MouseEvent.CLICK, ControllerClick);				mc_Controller.VideoMoveBar.drag_mc.addEventListener(MouseEvent.MOUSE_DOWN, startCurrentSlideDrag);				mc_Controller.VideoMoveBar.drag_mc.addEventListener(MouseEvent.MOUSE_UP, stopCurrentSlideDrag);				mc_Controller.VideoMoveBar.marcabar.addEventListener(MouseEvent.CLICK, setCurrentSlideDrag);				mc_Controller.VideoVoumeBar.drag_mc.addEventListener(MouseEvent.MOUSE_DOWN, startCurrentVolumeDrag);				mc_Controller.VideoVoumeBar.drag_mc.addEventListener(MouseEvent.MOUSE_UP, stopCurrentVolumeDrag);				mc_Controller.VideoVoumeBar.marcabar.addEventListener(MouseEvent.CLICK, setCurrentVolumeDrag);}			mc_Controller.btn_pause.visible = false;			mc_Controller.btn_mute.visible = false;			mc_Controller.VideoProgressBar.pBar.width = 0;			mc_Controller.VideoMoveBar.pBar.width = 0;		}		private function setCurrentVolumeDrag(e:MouseEvent):void {}		private function startCurrentVolumeDrag(e:MouseEvent):void {			starDragVolume = true;			e.target.startDrag(false, new Rectangle(0, -6, 95, 0));			removeEventListener(Event.ENTER_FRAME, AdjustVolume);			addEventListener(Event.ENTER_FRAME, MueveBarraVolumen);		}		private function stopCurrentVolumeDrag(e:MouseEvent):void {			starDragVolume = false;			e.target.stopDrag();			removeEventListener(Event.ENTER_FRAME, MueveBarraVolumen);			addEventListener(Event.ENTER_FRAME, AdjustVolume);		}		private function MueveBarraVolumen(e:Event):void {			var pcent2:Number = (mc_Controller.VideoVoumeBar.drag_mc.x * 100) / 95;			var sc2:Number = (100 * pcent2) / 100;			mc_Controller.VideoVoumeBar.pBar.width = sc2;			player.setVolume(pcent2);			mc_Controller.btn_mute.visible = (pcent2 <= 0) ? true : false;			mc_Controller.btn_volumen.visible = (pcent2 <= 0) ? false : true;		}		private function setCurrentSlideDrag(e:MouseEvent):void {			var pcent:Number = ((e.target.x - e.target.mouseX) * -1) / (e.target.width + 20);			var segundoInStart:Number = pcent * player.getDuration();			player.loadVideoById(currentIdVideo, segundoInStart);			mc_Controller.main_btn_play.visible = false;			mc_Controller.btn_pause.visible = true;			mc_Controller.btn_play.visible = false;		}		private function startCurrentSlideDrag(e:MouseEvent):void {			starDrag = true;			e.target.startDrag(false, new Rectangle(0, -6, 415, 0));			removeEventListener(Event.ENTER_FRAME, trackProgress);		}		private function stopCurrentSlideDrag(e:MouseEvent):void {			starDrag = false;			e.target.stopDrag();			var segundoInStart:Number = (player.getDuration() * Math.floor((e.target.x / 415) * 100)) / 100;			player.loadVideoById(currentIdVideo, segundoInStart);			if(mc_Controller.main_btn_play.visible) mc_Controller.main_btn_play.visible = false;			mc_arrow.visible = false;			mc_arrowB.visible = false;			containerButtons.visible = false;			addEventListener(Event.ENTER_FRAME, trackProgress);		}		private function ControllerClick(e:MouseEvent):void {			switch(e.target.name) {				case 'btn_play':				case 'main_btn_play':					player.playVideo();					mc_Controller.main_btn_play.visible = false;					mc_Controller.btn_pause.visible = true;					mc_Controller.btn_play.visible = false;					break;				case 'btn_pause':					player.pauseVideo();					mc_Controller.main_btn_play.alpha=.4;					mc_Controller.main_btn_play.visible = true;					mc_Controller.btn_pause.visible = false;					mc_Controller.btn_play.visible = true;					break;				case 'btn_mute':					player.unMute();					mc_Controller.btn_mute.visible = false;					mc_Controller.btn_volumen.visible = true;					break;				case 'btn_volumen':					player.mute();					mc_Controller.btn_mute.visible = true;					mc_Controller.btn_volumen.visible = false;					break;			} tracker.trackEvent("snax-secuencias", e.type, e.target.name);		}		private function creaPlayer():void {			tracker.trackEvent("snax-secuencias", "create", "player");			loader.contentLoaderInfo.addEventListener(Event.INIT, onLoaderInit);			loader.load(new URLRequest("http://www.youtube.com/apiplayer?version=3"));			currentIdVideo = _current_data.vid;			showArrows = _current_data.showArrows;			ArrowsType = _current_data.ArrowsType;		}		private function onLoaderInit(event:Event):void {			SimpleLog.print(':::INIT:::');			addChild(loader);			loader.content.addEventListener("onReady", onPlayerReady);			loader.content.addEventListener("onError", onPlayerError);			loader.content.addEventListener("onStateChange", onPlayerStateChange);			loader.content.addEventListener("onPlaybackQualityChange", onVideoPlaybackQualityChange);			addEventListener(Event.ENTER_FRAME, trackProgress);			addEventListener(Event.ENTER_FRAME, AdjustVolume);			addEventListener(Event.ENTER_FRAME, loaded);		}		private function onPlayerReady(event:Event):void {			player = loader.content;			player.loadVideoById(currentIdVideo);			player.setSize(980, 510);			player.x = 0;			player.y = -10;			addChild(containerButtons);			addChild(mc_Controller);			//addChild(miMask);			addChild(mc_arrow);			addChild(mc_arrowB);			mc_arrow.visible = false;			mc_arrowB.visible = false;			//player.mask = miMask;			miMask.x = 5 + ((stage.stageWidth - miMask.width) / 2);			listenersController();			player.pauseVideo();		}		private function onPlayerError(event:Event):void {}		private function onPlayerStateChange(event:Event):void {			if (event['data'] == 3) {				mc_Controller.visible = true;				mc_arrow.visible = false;				mc_arrowB.visible = false;				containerButtons.visible = false;				_status_view = false;				creaBotones(currentIdVideo);			}		}		private function onVideoPlaybackQualityChange(event:Event):void {			mc_Controller.visible = true;		}		private function AdjustVolume(event:Event):void {			if(!player) return;			var volumeCurrent:Number = player.getVolume();			var pcent:Number = volumeCurrent;			var sc:Number = (95 * pcent) / 100;			mc_Controller.VideoVoumeBar.pBar.width = sc;			mc_Controller.VideoVoumeBar.drag_mc.x = mc_Controller.VideoVoumeBar.pBar.width - 4;		}		private function loaded(event:Event):void {			if(!player				|| (_status_view && player.getCurrentTime() >= currentSegIni)				|| (!_status_view && player.getCurrentTime() <= currentSegIni)){					return;			} _status_view = true;			containerButtons.visible = true;			if(showArrows && _countArrows < 2){				mc_arrow.visible = true;				switch(Number(ArrowsType)){					case 1:						mc_arrow.x = 200;						mc_arrow.y = 15;						mc_arrow.rotation = -10;						mc_arrowB.x = 800;						mc_arrowB.y = 15;						mc_arrowB.rotation = 90;						mc_arrowB.visible = true;					break;					case 2:						mc_arrow.x = 200;						mc_arrow.y = 170;						mc_arrow.rotation = 250;						mc_arrowB.visible = false;					break;				} _countArrows++;			}					}		private function creaBotones(idVideo:String):void {			SimpleLog.print("Current Video", idVideo);			removeBotones(containerButtons);			var len:int = -1;			if (_current_data.hasOwnProperty("A") 				 || _current_data.hasOwnProperty("B")) {				len = 2;			} else if (_current_data.hasOwnProperty("i1") 						|| _current_data.hasOwnProperty("i2") 						|| _current_data.hasOwnProperty("i3")) {				len = 3;			}						showArrows = _current_data.hasOwnProperty("showArrows") 							? _current_data.showArrows : false;			ArrowsType = _current_data.hasOwnProperty("ArrowsType") 							? _current_data.ArrowsType : 0;						function set_button(_data:Object, _len:int):void {				for (var a:int = 1; a < _len + 1; a++) {					var _tmp_id:String = (len < 3) ? ((a < 2) ? "A" : "B") : "i" + a;					var _tmp:Object = _data[_tmp_id];					var mc:MovieClip = new MovieClip();					mc.name = _tmp_id;					mc.addEventListener(MouseEvent.CLICK, myClickGoto);					mc.useHandCursor = true;					mc.buttonMode = true;					mc.alpha = 0;					mc.graphics.beginFill(0xFF0000);					mc.graphics.drawRect(0, 0, _tmp.w, _tmp.h);					mc.graphics.endFill();					mc.x = _tmp.x;					mc.y = _tmp.y;					containerButtons.addChild(mc);					SimpleLog.print("\tData:", _tmp_id, _tmp.vid);				}			}			set_button((len > -1) ? _current_data : _json_data.E, 					   (len > -1) ? len : 2);			currentSegIni = _current_data.segundoIni;			currentSegFin = _current_data.segundoEnd;			if (len == -1) {				_current_data = _json_data.E;				PurgerUtil.cleanCollection(_tracker_list);				_tracker_list = new Array();			}		}		private function myClickGoto(e:MouseEvent):void {			_current_data = _current_data[e.target.name];						mc_Controller.visible = false;			mc_arrow.visible = false;			mc_arrowB.visible = false;			player.loadVideoById(_current_data.vid);			player.playVideo();			currentIdVideo = _current_data.vid;						/** GA- **/						try{
				_tracker_list.push(e.target.name);				tracker.trackEvent("snax-secuencias", e.type, _tracker_list.join("_"));		
			}catch(error:Error){ SimpleLog.print(error.message); }						/** -GA **/					}		private function removeBotones(container:MovieClip):void {			while (container.numChildren > 0) {				var mc:* = container.removeChildAt(0);				if(mc.hasEventListener(MouseEvent.CLICK)) mc.removeEventListener(MouseEvent.CLICK, myClickGoto);			}		}		private function setTextTime(currentTime:Number, duration:Number):void {			mc_Controller.counterTime_txt.text = seg2min(currentTime) + " / " + seg2min(duration);		}		private function seg2min(num:Number):String {			var seg:* = Math.floor(num % 60);			return "." + ((seg < 10) ? "0" + seg : seg);		}		private function trackProgress(event:Event):void {			if(!player) return;			var bLoaded:* = player.getVideoBytesLoaded();			var bTotal:* = player.getVideoBytesTotal();			var currentTime:* = player.getCurrentTime();			var duration:* = player.getDuration();			var pcent:Number = Math.floor((bLoaded / bTotal) * 100);			var sc:Number = (420 * pcent) / 100;			mc_Controller.VideoProgressBar.pBar.width = sc;			var pcent2:Number = Math.floor((currentTime / duration) * 100);			var sc2:Number = (415 * pcent2) / 100;			mc_Controller.VideoMoveBar.pBar.width = sc2;			if (!starDrag) mc_Controller.VideoMoveBar.drag_mc.x = mc_Controller.VideoMoveBar.pBar.width - 4;			setTextTime(currentTime, duration);		}	}}