package yr.mx.snax.pcq.video {	import flash.display.*;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.geom.Rectangle;	public class VolumeSliderControl extends MovieClip {		private var currentVolume:Number = 0;		private var marker:MovieClip;		private var track:MovieClip;		public function set curVolume(inNum:Number):void {			currentVolume = inNum;			adjustVolumeBar();		}		public function get curVolume():Number {			return currentVolume;		}		public function VolumeSliderControl() {			initVolumeSlider();		}		/*		Method:adjustVolumeBar		Parameters:		Returns:		 */		private function adjustVolumeBar():void {			marker.x = currentVolume;		}		/*		Method:initVolumeSlider		Parameters:		Returns:		 */		private function initVolumeSlider():void {			volumeBarDragging = false;			marker = bar;			track = line;			volumeSliderRectangle = new Rectangle(0, 0, 60, 0);			marker.buttonMode = true;			marker.addEventListener(MouseEvent.MOUSE_DOWN, startVolumeSlideDrag);			marker.addEventListener(MouseEvent.MOUSE_UP, stopVolumeSlideDrag);			track.addEventListener(MouseEvent.MOUSE_DOWN, onTrackDownEvent);		}		/*		Method:startVolumeSlideDrag		Parameters:		event:MouseEvent		Returns:		 */		private function startVolumeSlideDrag(event:MouseEvent):void {			volumeBarDragging = true;			marker.startDrag(false, volumeSliderRectangle);			marker.addEventListener(Event.ENTER_FRAME, adjustVolume);		}		/*		Method:stopVolumeSlideDrag		Parameters:		event:MouseEvent		Returns:		 */		private function stopVolumeSlideDrag(event:MouseEvent):void {			if (volumeBarDragging) {				volumeBarDragging = false;				marker.removeEventListener(Event.ENTER_FRAME, adjustVolume);				marker.stopDrag();			}		}		/*		Method:onTrackDownEvent		Parameters:		event:MouseEvent		Returns:		 */		private function onTrackDownEvent(event:MouseEvent):void {			currentVolume = Math.floor(event.localX / track.width * 100);			marker.x = event.localX;			dispatchEvent(new Event(Event.CHANGE));		}		/*		Method:adjustVolume		Parameters:		event:Event		Returns:		 */		private function adjustVolume(event:Event):void {			currentVolume = marker.x;			dispatchEvent(new Event(Event.CHANGE));		}	}}