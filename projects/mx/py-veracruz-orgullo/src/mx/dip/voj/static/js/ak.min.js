!(function () {
    var root = this;

    var _ = root._;

    if (!_) {
        throw new Error('require underscore');
    }

    var $ = root.$;

    if (!$) {
        throw new Error('require jQuery');
    }

    var ak = root.ak = root.ak || {};
    ak.VERSION = 'v1.0.0.alpha.0';

    /* === === === === === === === === === === === === === === === === === === === === === === === === === === === ===*/

    var AKAlert = root.AKAlert = ak.alert = function (args) {
        this.init.apply(this, args || {});
    };

    _.extend(AKAlert.prototype, {
        init:function () {},

        _element_name:'.js-alert',

        _element:function () {
            return $(this._element_name) || undefined;
        },

        _template:'<div class="alert alert-{type}">'
            + '<button type="button" class="close" data-dismiss="alert">&times;</button>'
            + '<span class="alert-message">{message}</span></div>',

        add:function (_message, _type, _delay) {
            var el = this.remove();
            if (!el || !_message) {
                return;
            }
            if(_.isObject(_message)){
                var a, item, attr, msg, ref, _message_iter = [];
                for(a in _message){
                    msg = ''; ref = _message[a];
                    if(ref){
                        item = $("#"+a); attr = item.attr('data-alert-name');
                        if(attr){
                            msg = ('<u><b>{1}:</b></u>&nbsp;{2}<br>').replace('{1}',attr).replace('{2}',ref[0]);
                            _message_iter.push(msg);
                        }
                    }
                }
                _message = ('<span>{1}</span>').replace('{1}',_message_iter.join(''));
            }
            var tmpl = this._template
                .replace('{type}', _type || 'error')
                .replace('{message}', _message || 'Critical Error!');
            el.append(tmpl).show();
            if (_type == 'success' || _delay) {
                el.delay(_delay || 1500).fadeOut(400);
            }
        },

        update:function (_message) {
            var el = this._element();
            if (!el) {
                return;
            }
            el.find('span').text(_message);
        },

        remove:function () {
            try {
                var el = this._element();
                el.hide();
                el.empty();
                return el;
            } catch (e) {
                return undefined;
            }
        },

        add_info:function (_message, _delay) {
            this.add(_message, 'info', _delay);
        },

        add_success:function (_message, _delay) {
            this.add(_message, 'success', _delay);
        },

        add_warning:function (_message, _delay) {
            this.add(_message, 'warning', _delay);
        },

        add_error:function (_message, _delay) {
            this.add(_message, 'error', _delay);
        }

    });

    /* === === === === === === === === === === === === === === === === === === === === === === === === === === === ===*/

    var AKNavHelper = root.AKNavHelper = ak.AKNavHelper = function (args) {
        this.init.apply(this, args || {});
    };

    _.extend(AKNavHelper.prototype, {
        init:function () {
            var el = this._element();
            if (!el) {
                return;
            }
            var url, url_path = location.pathname;
            el.find('li').each(function (k, v) {
                try {
                    url = v.children[0].href;
                } catch (e) {
                    url = '';
                }

                if (url.indexOf(url_path) > -1) {
                    $(v).addClass('active');
                    return false;
                }
            });
        },

        _element_name:'.js-nav-menu',

        _element:function(){
            return $(this._element_name) || undefined;
        }

    });

    /* === === === === === === === === === === === === === === === === === === === === === === === === === === === ===*/

    var AKServer = root.AKServer = ak.AKServer = function (args) {
        this.init.apply(this, args || {});
    };

    _.extend(AKServer.prototype, {
        init:function(){},

        get_cookie:function(value){
            var result = document.cookie.match('\\b' + value + '=([^;]*)\\b');
            return result ? result[1] : undefined;
        },

        simple_post:function(url, args, callback){
            args = args || {};
            args._xsrf = this.get_cookie('_xsrf');

            $.ajax({
                url: url,
                data: $.param(args),
                dataType: 'text',
                type: 'POST',

                success: function(response){
                    if(response){
                        var json = eval('('+response+')');
                        if(json.error.id == 0){
                            if(typeof callback == 'function'){
                                callback(json);
                            }else{
                                var url = '';
                                try{
                                    url = json.response.next;
                                }catch(e){
                                    url = $.url().param('next');
                                }
                                if(url.match(/.+/ig)){
                                   location.href = unescape(url);
                                }
                            }
                        }else{
                            alert(json.error.message);
                        }
                    }else{
                        alert('Critical Error.-');
                    }
                },

                error: function(e){
                    alert('[ERROR:'+e.status+'] :: '+e.statusText);
                }
            });
        },

        post: function(url, args, callback, message_wait){
            args = args || {};
            args._xsrf = this.get_cookie('_xsrf');

            var _alert = new AKAlert();
            _alert.add_info(message_wait || 'Please, wait...');

            $.ajax({
                url: url,
                data: $.param(args),
                dataType: 'text',
                type: 'POST',

                success: function(response){
                    if(response){
                        var json = eval('('+response+')');
                        if(json.error.id == 0){
                            if(typeof callback == 'function'){
                                callback(json);
                            }else{
                                var url = '';
                                try{
                                    url = json.response.next;
                                }catch(e){
                                    url = $.url().param('next');
                                }
                                if(url.length && url.match(/.+/ig)){
                                    location.href = unescape(url);
                                }
                            }
                            _alert.add_success(json.error.message);
                        }else{
                            _alert.add_error(json.error.message);
                        }
                    }else{
                        _alert.add_error('CRITICAL');
                    }
                },

                error: function(e){
                    _alert.add_error('[ERROR:'+e.status+'] :: '+e.statusText);
                }
            });
        }

    });

    /* === === === === === === === === === === === === === === === === === === === === === === === === === === === ===*/

    $(function(){

        jQuery.fn.formReset = function(){
            $(this).each(function(){this.reset();});
        };

        /* === */

        new AKNavHelper();

    });

}).call(this);




















